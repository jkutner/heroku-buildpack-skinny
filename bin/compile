#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin
OPT_DIR=$BP_DIR/opt
LIB_DIR=$BP_DIR/lib

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Install node.js
install_nodejs() {
  local version="$1"
  local dir="$2"
  local os="linux"
  local cpu="x64"

  echo "Downloading and installing node $version..."
  local download_url="http://s3pository.heroku.com/node/v$version/node-v$version-$os-$cpu.tar.gz"
  curl "$download_url" --silent --fail -o /tmp/node.tar.gz || (echo "Unable to download node $version; does it exist?" && false)
  tar xzf /tmp/node.tar.gz -C /tmp
  mv /tmp/node-v$version-$os-$cpu $dir
  chmod +x $dir/bin/*
}

# Load config vars into environment
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

cache_copy() {
  rel_dir=$1
  from_dir=$2
  to_dir=$3
  rm -rf $to_dir/$rel_dir
  if [ -d $from_dir/$rel_dir ]; then
    mkdir -p $to_dir/$rel_dir
    cp -pr $from_dir/$rel_dir/. $to_dir/$rel_dir
  fi
}

export_env_dir $ENV_DIR

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-"https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}... "
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

# Install Node.js
nodejsVersion=${NODEJS_VERSION:-4.1.0}
echo "-----> Installing Node.js ${nodejsVersion}..."
install_nodejs ${nodejsVersion} ${BUILD_DIR}/.heroku/nodejs 2>&1 | indent
PATH=${BUILD_DIR}/.heroku/nodejs/bin:$PATH

# unpack cache
CACHED_DIRS="target project/target project/boot"
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $CACHE_DIR $BUILD_DIR
done

[ -d $CACHE_DIR/.ivy2 ] && mv $CACHE_DIR/.ivy2 $HOME/.ivy2

# Build
cd $BUILD_DIR
echo "-----> Executing: ./skinny package:standalone"
./skinny package:standalone < /dev/null

mv $HOME/.ivy2 $CACHE_DIR/.ivy2 && true

# repack cache
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done

# Remove extras from slug
rm -rf $BUILD_DIR/standalone-build/target/streams
